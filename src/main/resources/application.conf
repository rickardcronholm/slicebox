slicebox {

  host = "0.0.0.0"
  port = 5000

  session-timeout = 3600s

  ssl {
    ssl-encryption = off

    keystore {
      path = "slicebox.jks"
      password = "slicebox"
    }
  }

  public {
    host = ${slicebox.host}
    port = ${slicebox.port}
    with-ssl = false
  }

  dicom-storage {
    file-system {
      name = "on-disk"
      path = "dicom"
    }
    s3 {
      name = "s3"
      # replace with S3 bucket name
      # depending on bucket name, check path style vs virtual hosted style access in alpakka s3 config
      bucket = "sbx-data.example.com"
      # region of the bucket
      region = "us-east-1"
      # prefix for objects stored on S3
      prefix = "dicom"
    }
    config = ${slicebox.dicom-storage.file-system}
  }

  database {
    in-memory {
      profile = "slick.jdbc.H2Profile$"
      db {
        url = "jdbc:h2:mem:./slicebox"
        driver = org.h2.Driver
        connectionPool = disabled
        keepAliveConnection = true
      }
    }
    h2 {
      profile = "slick.jdbc.H2Profile$"
      db {
        url = "jdbc:h2:./slicebox"
        driver = org.h2.Driver
        numThreads = 20
        queueSize = 10000
        connectionTimeout = 10000
      }
    }
    mysql {
      profile = "slick.jdbc.MySQLProfile$"
      db {
        url = "jdbc:mysql://localhost:3306/slicebox"
        driver = com.mysql.cj.jdbc.Driver
        numThreads = 20
        queueSize = 10000
        user = "slicebox"
        password = "slicebox"
        connectionTimeout = 10000
        properties = {
          useSSL = false
          useJDBCCompliantTimezoneShift=true
          serverTimezone=UTC
          useUnicode = true // remove for default encoding
          characterEncoding = utf8 // remove for default encoding
          sessionVariables = "sql_mode=ANSI_QUOTES"
        }
      }
    }
    config = ${slicebox.database.h2}
  }

  stream {
    chunk-size = 5m
  }

  anonymization {
    purge-empty-keys = false
    encryption = false
    public-key-path = ""
    private-key-path = ""
  }

  superuser {
    user = "admin"
    password = "admin"
  }

  user-sessions-include-ip-and-useragent = true

  accepted-transfer-syntaxes: [
    "1.2.840.10008.1.2", # Implicit VR Little Endian
    "1.2.840.10008.1.2.1", # Explicit VR Little Endian
    "1.2.840.10008.1.2.2", # Explicit VR Big Endian Retired
    "1.2.840.10008.1.2.1.99", # Deflated Explicit VR Little Endian
    "1.2.840.10008.1.2.4.50" # JPEG Baseline 1
  ]

  accepted-sop-classes {

    # SOP Class UIDs accepted in imports, directory watches and SCP connections
    image-data: [
      "1.2.840.10008.5.1.4.1.1.1", # ComputedRadiographyImageStorage
      "1.2.840.10008.5.1.4.1.1.1.1", # DigitalXRayImageStorageForPresentation
      "1.2.840.10008.5.1.4.1.1.501.2.2", # DigitalXRayImageStorageForProcessing
      "1.2.840.10008.5.1.4.1.1.1.2", # DigitalMammographyXRayImageStorageForPresentation
      "1.2.840.10008.5.1.4.1.1.1.2.1", # DigitalMammographyXRayImageStorageForProcessing
      "1.2.840.10008.5.1.4.1.1.1.3", # DigitalIntraOralXRayImageStorageForPresentation
      "1.2.840.10008.5.1.4.1.1.1.3.1", # DigitalIntraOralXRayImageStorageForProcessing
      "1.2.840.10008.5.1.4.1.1.2", # CTImageStorage
      "1.2.840.10008.5.1.4.1.1.2.1", # EnhancedCTImageStorage
      "1.2.840.10008.5.1.4.1.1.3", # UltrasoundMultiframeImageStorageRetired
      "1.2.840.10008.5.1.4.1.1.3.1", # UltrasoundMultiframeImageStorage
      "1.2.840.10008.5.1.4.1.1.4", # MRImageStorage
      "1.2.840.10008.5.1.4.1.1.4.1", # EnhancedMRImageStorage
      "1.2.840.10008.5.1.4.1.1.4.2", # MRSpectroscopyStorage
      "1.2.840.10008.5.1.4.1.1.6", # UltrasoundImageStorageRetired
      "1.2.840.10008.5.1.4.1.1.6.1", # UltrasoundImageStorage
      "1.2.840.10008.5.1.4.1.1.12.1", # XRayAngiographicImageStorage
      "1.2.840.10008.5.1.4.1.1.12.1.1", # EnhancedXAImageStorage
      "1.2.840.10008.5.1.4.1.1.12.2", # XRayRadiofluoroscopicImageStorage
      "1.2.840.10008.5.1.4.1.1.12.2.1", # EnhancedXRFImageStorage
      "1.2.840.10008.5.1.4.1.1.13.1.1", # XRay3DAngiographicImageStorage
      "1.2.840.10008.5.1.4.1.1.13.1.2", # XRay3DCraniofacialImageStorage
      "1.2.840.10008.5.1.4.1.1.13.1.3", # BreastTomosynthesisImageStorage
      "1.2.840.10008.5.1.4.1.1.14.1", # IntravascularOpticalCoherenceTomographyImageStorageForPresentation
      "1.2.840.10008.5.1.4.1.1.14.2", # IntravascularOpticalCoherenceTomographyImageStorageForProcessing
      "1.2.840.10008.5.1.4.1.1.20", # NuclearMedicineImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.1", # VLEndoscopicImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.2", # VLMicroscopicImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.3", # VLSlidecoordinatesMicroscopicImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.5.1", # OphthalmicPhotography8BitImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.5.2", # OphthalmicPhotography16BitImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.5.4", # OphthalmicTomographyImageStorage
      "1.2.840.10008.5.1.4.1.1.77.1.6", # VLWholeSlideMicroscopyImageStorage
      "1.2.840.10008.5.1.4.1.1.128", # PositronEmissionTomographyImageStorage
      "1.2.840.10008.5.1.4.1.1.130", # EnhancedPETImageStorage
      "1.2.840.10008.5.1.4.1.1.481.1", # RTImageStorage
      "1.2.840.10008.5.1.4.1.1.66.4" # SegmentationStorage
    ]

    # Additional SOP Class UIDs accepted in single image uploads (POST to /api/images)
    extended: [
      "1.2.840.10008.5.1.4.1.1.7", # SecondaryCaptureImageStorage
      "1.2.840.10008.5.1.4.1.1.7.1", # MultiframeSingleBitSecondaryCaptureImageStorage
      "1.2.840.10008.5.1.4.1.1.7.2", # MultiframeGrayscaleByteSecondaryCaptureImageStorage
      "1.2.840.10008.5.1.4.1.1.7.3", # MultiframeGrayscaleWordSecondaryCaptureImageStorage
      "1.2.840.10008.5.1.4.1.1.7.4" # MultiFrameTrueColorSecondaryCaptureImageStorage
    ]
  }

}

akka {
  loglevel = DEBUG
  stdout-loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at DEBUG level
      receive = off
    }
  }
  test {
    timefactor = 1
  }
  io.tcp.windows-connection-abort-workaround-enabled = off

  http {
    server {
      server-header = "slicebox"
      bind-timeout = 10s
      idle-timeout = 900s
      request-timeout = 600s
      remote-address-header = on
    }
    client {
      user-agent-header = "slicebox"
      connecting-timeout = 20s
      idle-timeout = 900s
    }
    parsing {
      max-content-length = 64m
      max-chunk-size = ${slicebox.stream.chunk-size}
    }
    host-connection-pool {
       max-retries = 5
       pool-implementation = legacy
    }
  }

  stream.alpakka.s3 {
    debug-logging = true

    # Enable path style access to s3, i.e. "https://s3-eu-west-1.amazonaws.com/my.bucket/myobject"
    # Default is virtual-hosted style.
    # When using virtual hostedâ€“style buckets with SSL, the S3 wild card certificate only matches buckets that do not contain periods.
    # Buckets containing periods will lead to certificate errors. In those cases it's useful to enable path-style access.
    path-style-access = true
  }
}
